<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gem | SCRABBLE&#9734;NOTE]]></title>
  <link href="http://fakestarbaby.github.io/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://fakestarbaby.github.io/"/>
  <updated>2013-06-01T03:05:24+09:00</updated>
  <id>http://fakestarbaby.github.io/</id>
  <author>
    <name><![CDATA[fakestarbaby]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails_configで環境毎に定数を管理しよう！]]></title>
    <link href="http://fakestarbaby.github.io/blog/2012/01/12/rails-config-how-to/"/>
    <updated>2012-01-12T20:42:00+09:00</updated>
    <id>http://fakestarbaby.github.io/blog/2012/01/12/rails-config-how-to</id>
    <content type="html"><![CDATA[<h2>rails_config</h2>

<p>定数を開発環境毎に YAML ファイルで管理出来るプラグイン。</p>

<!-- more -->


<h3>公式リポジトリ</h3>

<p><a href="https://github.com/railsjedi/rails_config">https://github.com/railsjedi/rails_config</a></p>

<h3>The Ruby Toolbox</h3>

<p><a href="https://www.ruby-toolbox.com/projects/rails_config">https://www.ruby-toolbox.com/projects/rails_config</a></p>

<hr />

<h3>Rails で試してみよう！</h3>

<p>Gemfile に rails_config を記述する。</p>

<p><code>ruby Gemfile
gem 'rails_config'
</code></p>

<p>コンソールでコマンドを実行すると、必要となる YAML ファイル一式が自動生成される。</p>

<p>```bash
$ bundle install
$ rails g rails_config:install</p>

<pre><code>create  config/initializers/rails_config.rb
create  config/settings.yml
create  config/settings.local.yml
create  config/settings
create  config/settings/development.yml
create  config/settings/production.yml
create  config/settings/test.yml
append  .gitignore
</code></pre>

<p>```</p>

<p>各種ファイルの役割は以下。</p>

<ul>
<li>config/initializers/rails_config.rb</li>
</ul>


<p>定義した定数にアクセスする為のクラス名称を定義する。デフォルトは「Settings」になっている。</p>

<ul>
<li>.gitignore</li>
</ul>


<p>ファイル名称に「local」が含まれる YAML ファイルは、全てローカル環境専用のファイルとみなされる為、これらのファイルをバージョン管理に含めないような定義が追記される。</p>

<ul>
<li>config/settings.local.yml</li>
</ul>


<p>ローカル環境専用の YAML ファイル。ローカル環境で動作させている場合は、全ての YAML ファイルに記述されている定数より優先して使用される。ローカル環境のみ、別の定数を割り当てたい時に使用する。</p>

<ul>
<li>config/settings.yml</li>
</ul>


<p>全ての環境(development / test / production)のベースとして使用される。環境に左右されない定数を定義したい時に使用する。</p>

<ul>
<li>config/settings/development.yml</li>
</ul>


<p>開発環境でのみ、別の定数を割り当てたい時に使用する。「config/settings.local.yml」との違いは、個々人のローカル環境毎に異なる定数なのか、開発環境毎に異なる定数なのかのみ。</p>

<ul>
<li>config/settings/test.yml</li>
</ul>


<p>テスト環境でのみ、別の定数を割り当てたい時に使用する。</p>

<ul>
<li>config/settings/production.yml</li>
</ul>


<p>本番環境でのみ、別の定数を割り当てたい時に使用する。</p>

<h3>利用方法</h3>

<p>利用する時は以下のような感じで。</p>

<p><code>ruby config/settings.yml
service_name: "Service Name
service:
  tag_line: "Rails configuration plugin"
</code></p>

<p>```bash
$ rails c</p>

<p>1.9.2-head :001 > Settings.service_name
  => &ldquo;Service Name&rdquo;
1.9.2-head :002 > Settings.service.tag_line
 => &ldquo;Rails configuration plugin&rdquo;
```</p>

<h2>どんな感じ？</h2>

<p>同様の機能を持つ settings_logic というプラグインもあるが、こちらは各種ファイルの自動生成コマンドも用意されているし、ローカル環境専用ファイルも用意されているので非常に便利。</p>
]]></content>
  </entry>
  
</feed>
